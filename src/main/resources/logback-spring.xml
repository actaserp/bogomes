<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %highlight(%-5level) [%thread] %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>


    <appender name="INFO_WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/info/info_warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/info/info_warn.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>15</maxHistory>
        </rollingPolicy>

        <!-- INFO 필터 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>

        <!-- WARN 필터 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--로그는 비동기로 출력하도록 -->
    <appender name="ASYNC_INFO_WARN" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="INFO_WARN_FILE"/>
        <queueSize>1024</queueSize> <!-- 필요 시 조정 -->
        <discardingThreshold>0</discardingThreshold> <!-- 로그 유실 방지 -->
        <neverBlock>true</neverBlock> <!-- 큐가 가득 차도 블로킹 없이 무시 -->
    </appender>


    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/debug/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/debug/debug.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>15</maxHistory><!-- 15일 뒤에 자동 삭제 -->
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/error/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/error/error_log.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>%date %-5level [%thread] %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="ASYNC_ERROR_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="ERROR_FILE" />
        <queueSize>1000</queueSize>
        <discardingThreshold>0</discardingThreshold> <!-- 절대 버리지 않음 -->
    </appender>



    <!--api 경과시간 전용 로그 -->
    <appender name="API_TIME_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>logs/api-time/api_time.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>logs/api-time/api_time.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="ASYNC_API_TIME_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="API_TIME_FILE"/>
        <queueSize>1024</queueSize> <!-- 필요 시 조정 -->
        <discardingThreshold>0</discardingThreshold> <!-- 로그 유실 방지 -->
        <neverBlock>true</neverBlock> <!-- 큐가 가득 차도 블로킹 없이 무시 -->
    </appender>


    <!--<logger name="API_EXEC_TIME_LOGGER" level="INFO" additivity="false">
        <appender-ref ref="ASYNC_API_TIME_FILE" />
        <appender-ref ref="CONSOLE" />
    </logger>-->

    <!-- 나머지 로그는 여전히 파일+콘솔로 처리 -->
    <!-- 개발환경 (dev): 콘솔만 -->
    <springProfile name="local">
        <root level="DEBUG">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="ASYNC_INFO_WARN" />
            <appender-ref ref="ERROR_FILE" />
            <!--<appender-ref ref="DEBUG_FILE" />-->
        </root>

        <logger name="API_EXEC_TIME_LOGGER" level="INFO" additivity="false">
            <appender-ref ref="ASYNC_API_TIME_FILE" />
            <appender-ref ref="CONSOLE" />
        </logger>
    </springProfile>

    <!-- 운영환경 (prod): 파일만 -->
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="ASYNC_INFO_WARN" />
            <appender-ref ref="ASYNC_ERROR_FILE" />
        </root>
        <logger name="API_EXEC_TIME_LOGGER" level="INFO" additivity="false">
            <appender-ref ref="ASYNC_API_TIME_FILE" />
            <!--<appender-ref ref="CONSOLE" />-->
        </logger>

    </springProfile>

</configuration>